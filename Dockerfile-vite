# =============================================================================
# Dockerfile Universal para Proyectos Vite
# Compatible con cualquier resultado de "npm create vite@latest"
# =============================================================================

# --- STAGE: Development ---
FROM node:20-alpine AS development

WORKDIR /app

# Instalar dependencias del sistema para desarrollo
RUN apk add --no-cache curl bash

# Crear usuario no-root sin forzar GID/UID
RUN addgroup -S viteuser && adduser -S viteuser -G viteuser

# Establecer usuario no-root
USER viteuser

# Copiar package.json y package-lock.json desde app/
COPY --chown=viteuser:viteuser app/package*.json ./

# Instalar dependencias
RUN if [ -f "package-lock.json" ]; then npm ci; else npm install; fi

# Copiar el resto del código desde app/ (será sobrescrito por bind mounts en dev)
COPY --chown=viteuser:viteuser app/ .

# Exponer puertos: 5173 (Vite dev), 24678 (HMR)
EXPOSE 5173 24678

# Comando por defecto: detectar automáticamente el comando dev
CMD ["sh", "-c", "npm run dev 2>/dev/null || npm run serve 2>/dev/null || npx vite dev --host 0.0.0.0 --port 5173"]

# --- STAGE: Build ---
FROM node:20-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema necesarias para build
RUN apk add --no-cache git python3 make g++

# Copiar archivos de configuración de paquetes desde app/
COPY app/package*.json ./
COPY app/*.config.* ./

# Instalar ALL dependencias (incluye devDependencies para build)
RUN if [ -f "package-lock.json" ]; then npm ci; else npm install; fi

# Copiar código fuente completo desde app/
COPY app/ .

# Verificar que existe script de build
RUN npm run build --if-present || \
    npx vite build || \
    (echo "Error: No se encontró comando de build válido" && exit 1)

# --- STAGE: Production ---
FROM nginx:1.25-alpine AS production

# Instalar curl para health checks
RUN apk add --no-cache curl

# Copiar configuraciones de Nginx
COPY nginx-vite.conf /etc/nginx/conf.d/default.conf
COPY nginx-non-root.conf /etc/nginx/nginx.conf

# Verificar que el build existe y copiarlo
COPY --from=builder /app/dist /usr/share/nginx/html

# Verificar que los archivos fueron copiados correctamente
RUN if [ ! -f "/usr/share/nginx/html/index.html" ]; then \
    echo "Error: No se encontró index.html en el build" && \
    ls -la /usr/share/nginx/html && \
    exit 1; \
    fi

# Crear endpoint de health check
RUN echo '{"status":"healthy","service":"vite-app","timestamp":"'$(date -Iseconds)'"}' > /usr/share/nginx/html/health

# Crear endpoint de información del build
RUN echo '{"framework":"vite","build_time":"'$(date -Iseconds)'","nginx_version":"'$(nginx -v 2>&1 | cut -d' ' -f3)'"}' > /usr/share/nginx/html/build-info

# Crear script de entrypoint personalizado
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/sh
set -e

echo "Iniciando Nginx con build de Vite..."

# Crear directorios necesarios con permisos apropiados
mkdir -p /tmp/nginx /var/cache/nginx /var/log/nginx
touch /tmp/nginx/nginx.pid

# Configurar permisos para nginx user
chown -R nginx:nginx /usr/share/nginx/html /tmp/nginx /var/cache/nginx /var/log/nginx
chmod -R 755 /usr/share/nginx/html

# Verificar configuración de Nginx
nginx -t

# Iniciar Nginx
exec nginx -g 'daemon off;'
EOF

# Hacer el script ejecutable
RUN chmod +x /docker-entrypoint.sh

# Configurar permisos iniciales
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Logs de verificación
RUN echo "Build completado. Archivos disponibles:" && \
    ls -la /usr/share/nginx/html/ && \
    echo "Tamaño total del build:" && \
    du -sh /usr/share/nginx/html/

# Exponer puerto 80
EXPOSE 80

# Usar el entrypoint personalizado
ENTRYPOINT ["/docker-entrypoint.sh"]
